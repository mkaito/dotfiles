;; -*- mode: emacs-lisp -*-
;; This file is where Emacs writes custom variables.
;; Spacemacs will copy its content to your dotfile automatically in the
;; function `dotspacemacs/emacs-custom-settings'.
;; Do not alter this file, use Emacs customize interface instead.

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(LaTeX-command "pdflatex")
 '(ansi-color-faces-vector
   [default default default italic underline success warning error])
 '(ansi-color-names-vector
   ["black" "red3" "ForestGreen" "yellow3" "blue" "magenta3" "DeepSkyBlue" "gray50"])
 '(auth-sources '("~/.authinfo.gpg"))
 '(evil-want-Y-yank-to-eol nil)
 '(fci-rule-color "#222222")
 '(flycheck-nix-executable "/home/chris/.nix-profile/bin/nix-instantiate")
 '(gc-cons-threshold 200000000)
 '(lsp-file-watch-ignored
   '("[/\\\\]\\.git\\'" "[/\\\\]\\.hg\\'" "[/\\\\]\\.bzr\\'" "[/\\\\]_darcs\\'" "[/\\\\]\\.svn\\'" "[/\\\\]_FOSSIL_\\'" "[/\\\\]\\.idea\\'" "[/\\\\]\\.ensime_cache\\'" "[/\\\\]\\.eunit\\'" "[/\\\\]node_modules" "[/\\\\]\\.fslckout\\'" "[/\\\\]\\.tox\\'" "[/\\\\]dist\\'" "[/\\\\]dist-newstyle\\'" "[/\\\\]\\.stack-work\\'" "[/\\\\]\\.bloop\\'" "[/\\\\]\\.metals\\'" "[/\\\\]target\\'" "[/\\\\]\\.ccls-cache\\'" "[/\\\\]\\.vscode\\'" "[/\\\\]\\.deps\\'" "[/\\\\]build-aux\\'" "[/\\\\]autom4te.cache\\'" "[/\\\\]\\.reference\\'" "[/\\\\]bin/Debug\\'" "[/\\\\]obj\\'" "[/\\\\]build\\'"))
 '(lsp-file-watch-ignored-directories
   '("[/\\\\]\\.git\\'" "[/\\\\]\\.hg\\'" "[/\\\\]\\.bzr\\'" "[/\\\\]_darcs\\'" "[/\\\\]\\.svn\\'" "[/\\\\]_FOSSIL_\\'" "[/\\\\]\\.idea\\'" "[/\\\\]\\.ensime_cache\\'" "[/\\\\]\\.eunit\\'" "[/\\\\]node_modules" "[/\\\\]\\.fslckout\\'" "[/\\\\]\\.tox\\'" "[/\\\\]dist\\'" "[/\\\\]dist-newstyle\\'" "[/\\\\]\\.stack-work\\'" "[/\\\\]\\.bloop\\'" "[/\\\\]\\.metals\\'" "[/\\\\]target\\'" "[/\\\\]\\.ccls-cache\\'" "[/\\\\]\\.vscode\\'" "[/\\\\]\\.deps\\'" "[/\\\\]build-aux\\'" "[/\\\\]autom4te.cache\\'" "[/\\\\]\\.reference\\'" "[/\\\\]bin/Debug\\'" "[/\\\\]obj\\'" "[/\\\\]build\\'"))
 '(nix-indent-function 'nix-indent-line)
 '(org-agenda-files
   '("/home/chris/notes/BuJo.org" "/home/chris/notes/Calendario.org" "/home/chris/notes/Recetas.org" "/home/chris/notes/Vida.org" "/home/chris/notes/dieta.org" "/home/chris/notes/haven.org" "/home/chris/notes/lifting.org" "/home/chris/notes/pc.org" "/home/chris/notes/projects.org" "/home/chris/notes/rimworld.org" "/home/chris/notes/sc2.org" "/home/chris/notes/sleep.org" "~/dev/lchf/libro.org" "~/notes/serokell/notes.org" "~/notes/serokell/tasks.org" "~/notes/recetas/keto.org" "~/notes/personal/confidence.org" "~/notes/nix/development.org" "~/notes/minecraft/ftb_interactions.org" "~/notes/minecraft/po3.org" "~/notes/minecraft/sb2.org" "~/notes/loco2/interview.org" "~/notes/games/surviving_mars.org" "~/notes/computing/crypto.org"))
 '(org-export-backends '(ascii html icalendar latex md odt))
 '(org-startup-indented t)
 '(package-selected-packages
   '(base16-theme yaml-mode web-mode tagedit slim-mode scss-mode sass-mode pug-mode nginx-mode less-css-mode impatient-mode simple-httpd haml-mode evil-commentary emmet-mode unfill mwim xterm-color shell-pop rvm ruby-tools ruby-test-mode ruby-refactor rubocop rspec-mode robe rbenv rake orgit org-projectile org-present org-pomodoro alert log4e gntp org-download org-brain multi-term minitest htmlize gnuplot flyspell-correct-ivy flyspell-correct flycheck-pos-tip pos-tip flycheck evil-org eshell-z eshell-prompt-extras esh-help chruby bundler inf-ruby auto-dictionary mmm-mode markdown-toc markdown-mode gh-md smeargle magit-gitflow gitignore-mode gitconfig-mode gitattributes-mode git-timemachine git-messenger git-link evil-magit magit magit-popup git-commit with-editor ws-butler winum which-key wgrep volatile-highlights vi-tilde-fringe uuidgen use-package toc-org symon string-inflection spaceline smex restart-emacs request rainbow-delimiters popwin persp-mode pcre2el password-generator paradox org-plus-contrib org-bullets open-junk-file neotree move-text macrostep lorem-ipsum linum-relative link-hint ivy-purpose ivy-hydra info+ indent-guide hungry-delete hl-todo highlight-parentheses highlight-numbers highlight-indentation hide-comnt help-fns+ helm-make google-translate golden-ratio flx-ido fill-column-indicator fancy-battery eyebrowse expand-region exec-path-from-shell evil-visualstar evil-visual-mark-mode evil-unimpaired evil-tutor evil-surround evil-search-highlight-persist evil-numbers evil-nerd-commenter evil-mc evil-matchit evil-lisp-state evil-lion evil-indent-plus evil-iedit-state evil-exchange evil-escape evil-ediff evil-args evil-anzu eval-sexp-fu elisp-slime-nav editorconfig dumb-jump define-word counsel-projectile column-enforce-mode clean-aindent-mode auto-highlight-symbol auto-compile aggressive-indent adaptive-wrap ace-window ace-link))
 '(pdf-view-midnight-colors '("#ffffff" . "#222222"))
 '(projectile-indexing-method 'hybrid)
 '(remote-file-name-inhibit-cache nil)
 '(safe-local-variable-values
   '((eval c-set-offset 'inlambda 0)
     (eval c-set-offset 'access-label '-)
     (eval c-set-offset 'substatement-open 0)
     (eval c-set-offset 'arglist-cont-nonempty '+)
     (eval c-set-offset 'arglist-cont 0)
     (eval c-set-offset 'arglist-intro '+)
     (eval c-set-offset 'inline-open 0)
     (eval c-set-offset 'defun-open 0)
     (eval c-set-offset 'innamespace 0)
     (indicate-empty-lines . t)
     (c-block-comment-prefix . "  ")
     (eval setq projectile-project-test-cmd #'counsel-test-ctest projectile-project-compilation-cmd #'cmake-ide-compile projectile-project-compilation-dir "build" cmake-ide-build-dir
           (projectile-compilation-dir)
           projectile-project-name "HelloWorld" projectile-project-run-cmd
           (concat
            (projectile-compilation-dir)
            projectile-project-name)
           counsel-test-dir
           (projectile-compilation-dir))
     (eval setq projectile-project-test-cmd #'counsel-test-ctest projectile-project-compilation-cmd #'cmake-ide-compile projectile-project-compilation-dir "build" cmake-ide-build-dir
           (projectile-compilation-dir)
           (projectile-project-name "HelloWorld")
           projectile-project-run-cmd
           (concat
            (projectile-compilation-dir)
            projectile-project-name)
           counsel-test-dir
           (projectile-compilation-dir))
     (eval setq projectile-project-test-cmd #'counsel-test-ctest projectile-project-compilation-cmd #'cmake-ide-compile projectile-project-compilation-dir "build" cmake-ide-build-dir
           (projectile-compilation-dir)
           projectile-project-run-cmd
           (concat
            (projectile-compilation-dir)
            projectile-project-name)
           counsel-test-dir
           (projectile-compilation-dir))
     (eval setq projectile-project-test-cmd #'counsel-test-ctest projectile-project-compilation-cmd #'cmake-ide-compile projectile-project-compilation-dir "build" cmake-ide-build-dir
           (projectile-compilation-dir)
           cmake-ide-compile-command "pwd && make && cd build && ./HelloWorld" counsel-test-dir
           (projectile-compilation-dir))
     (projectile-project-run-cmd . "./build/HelloWorld")
     (eval setq projectile-project-test-cmd #'counsel-test-ctest projectile-project-compilation-cmd #'cmake-ide-compile projectile-project-compilation-dir "build" cmake-ide-build-dir
           (projectile-compilation-dir)
           cmake-ide-compile-command "make && cd build && ./HelloWorld" counsel-test-dir
           (projectile-compilation-dir))
     (eval setq projectile-project-test-cmd #'counsel-test-ctest projectile-project-compilation-cmd #'cmake-ide-compile projectile-project-compilation-dir "build" cmake-ide-build-dir
           (projectile-compilation-dir)
           counsel-test-dir
           (projectile-compilation-dir))
     (javascript-backend . tide)
     (helm-make-arguments . "-j15")
     (projectile-project-configure-cmd . "cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..")
     (projectile-project-run-cmd . "./HelloWorld")
     (projectile-project-name . "HelloWorld")
     (eval setq projectile-project-test-cmd #'helm-ctest projectile-project-compilation-cmd #'helm-make-projectile projectile-project-compilation-dir "build" helm-make-build-dir
           (projectile-compilation-dir)
           helm-ctest-dir
           (projectile-compilation-dir))
     (ispell-local-dictionary . en)
     (origami-fold-style . triple-braces)
     (ispell-dictionary . "spanish")
     (typescript-backend . tide)
     (typescript-backend . lsp)
     (javascript-backend . tern)
     (javascript-backend . lsp)
     (elixir-enable-compilation-checking . t)
     (elixir-enable-compilation-checking)))
 '(sh-indent-for-continuation '++)
 '(sql-product 'postgres)
 '(vc-annotate-background "#222222")
 '(vc-handled-backends '(Git))
 '(vterm-shell "/bin/zsh -l")
 '(warning-suppress-types '((comp) (comp) (comp) (use-package)))
 '(web-mode-auto-close-style 3 t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(company-tooltip-common ((t (:inherit company-tooltip :weight bold :underline nil))))
 '(company-tooltip-common-selection ((t (:inherit company-tooltip-selection :weight bold :underline nil))))
 '(highlight-parentheses-highlight ((nil (:weight ultra-bold))) t))
