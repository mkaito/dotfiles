source ~/dev/dotfiles/zsh/nix.sh

alias ss='sudo systemctl'
alias ssu='systemctl --user'
alias jj='sudo journalctl'
alias jju='journalctl --user'

alias speedtest='wget --output-document=/dev/null http://speedtest.wdc01.softlayer.com/downloads/test500.zip'

alias timestamp='date +%s'
alias ts=timestamp

alias tt=transmission-remote
alias ttl='tt -l'

function mc {
  command mkdir -p "$1"
  cd "$1"
}

function tts {
  local torrents

  # [[-t 0]] = stdin (fd 0) is open and associated with a terminal device.
  if [[ ! -t 0 ]]; then
    torrents=()

    while read line; do
      torrents+=( $(echo $line | grep -Po '^\s*\d+' | tr -d ' ') )
    done

    torrents=${(j:,:)torrents}
    echo "Starting torrents: ${torrents}."
  elif [[ ! -z "$1" ]]; then
    torrents="$1"
  fi

  tt -t${torrents:-all} -s
}

function ttS {
  local torrents

  # [[-t 0]] = stdin (fd 0) is open and associated with a terminal device.
  if [[ ! -t 0 ]]; then
    torrents=()

    while read line; do
      torrents+=( $(echo $line | grep -Po '^\s*\d+' | tr -d ' ') )
    done

    torrents=${(j:,:)torrents}
    echo "Stopping torrents: ${torrents}."
  elif [[ ! -z "$1" ]]; then
    torrents="$1"
  fi

  tt -t${torrents:-all} -S ${2}
}

function ttr {
  local torrents

  # [[-t 0]] = stdin (fd 0) is open and associated with a terminal device.
  if [[ ! -t 0 ]]; then
    torrents=()

    while read line; do
      torrents+=( $(echo $line | grep -Po '^\s*\d+' | tr -d ' ') )
    done

    torrents=${(j:,:)torrents}
    echo "Removing torrents: ${torrents}."
  elif [[ ! -z "$1" ]]; then
    torrents="$1"
  fi
  [[ -z "$torrents" ]] && echo "Won't remove all torrents!" && return 2

  tt -t${torrents} -r
}

function ttm {
  local torrents
  local target

  [[ -z "$1" ]] && echo "Please specify a target folder" && return 2
  mkdir -p "$1"
  target=$(realpath "$1")

  if [[ ! -t 0 ]]; then
    # We're being fed on stdin

    torrents=()

    while read line; do
      torrents+=( $(echo $line | grep -Po '^\s*\d+' | tr -d ' ') )
    done

    torrents=${(j:,:)torrents}
    echo "Moving torrents: ${torrents} -> ${target}."
  elif [[ ! -z "$1" ]]; then
    torrents="$1"
    target=$(realpath "$2")
  fi

  [[ -z "$torrents" ]] && echo "Won't move all torrents!" && return 2

  tt "-t${torrents}" --move "${target}"
}

function ttf {
  local pattern='*'
  [[ ! -z "$1" ]] && pattern="$1"
  ttl | egrep -i "$pattern"
}

function tta {
  local args
  set -A args
  [[ ! -z "$1" ]] && args+=("-a" "$1")
  [[ ! -z "$2" ]] && args+=("-w" "$(realpath $2)")

  tt "$args[@]"
}

# function calc () { awk "BEGIN { print $* }" }
function calculate () { echo "$@" | bc -l ; }
alias calc='noglob calculate'

# Fix file and folder permissions recursively under .
alias fixperm="find . -type d -exec chmod 755 {} \; && find . -type f -exec chmod 644 {} \;"

# Yay shorthands
# alias yas='yay -S'
# alias yass='yay -Ss'
# alias yasy='yay -Sy'
# alias yasyy='yay -Syy'
# alias yasyu='yay -Syyu --devel --noconfirm'
# alias yard='yay -Rcsu'

# Homebrew shorthands
alias b='brew'
alias bu='brew update && brew outdated'
alias bg='brew upgrade && brew cleanup'
alias bs='brew search'
alias bi='brew install'
function br() {
  [[ -z $1 ]] && echo 'No target provided' && exit 1
  brew remove "$@"
  brew cleanup
}

# ls shorthands
alias l='gls -Fh --color=auto --group-directories-first'
alias ll='l -lh'
alias la='l -a'
alias lla='la -lh'

# git shorthands
alias g=git
alias g_='g reset'
alias g_h='g reset --hard'
alias g_m='g reset --mixed'
alias g_s='g reset --soft'
alias ga='g add'
alias gap='g add -p'
alias gb='g b'
alias gc-='g co -'
alias gc='g c'
alias gca='g c --amend'
alias gcan='g c --amend --no-edit'
alias gco='g co'
alias gcob='g co -b'
alias gd='g diff'
alias gf='git fixup'
alias gfu='g fetch --all --prune'
alias gl='g l'
alias glp='g l -p'
alias gm='g merge'
alias gp='g push'
alias gpp='g push --force-with-lease'
alias gppt='g push --force-with-lease --follow-tags'
alias gpt='g push --follow-tags'
alias gr='g rebase'
alias gra='g rebase --abort'
alias grc='g rebase --continue'
alias gri='g rebase --interactive --autosquash'
alias gs='g status --short'
alias gss='g status'
alias gu='g pull'
alias gz='g stash'
alias gza='g stash apply'
alias gzb='g stash branch'
alias gzc='g stash clear'
alias gzd='g stash drop'
alias gzl='g stash list'
alias gzp='g stash push'
alias gzpu='g stash push --include-untracked'
alias gzs='g stash show --include-untracked'
alias lg='lazygit'

# gh shorthands
alias ghb='gh browse'
alias ghpv='gh pr view -w'

# docker and docker compose
alias d='docker'
alias dc='d compose'
alias dce='dc exec'
alias dcr='dc run'
alias dcd='dc down'
alias dcu='dc up'
alias dcud='dcu -d'
alias dtail='dc logs -f --tail=100'

# Moving around
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias ......='cd ../../../../..'

# Neovim
alias vim='nvim'

# Emacs
alias e='emacsclient -n'
alias ec='e -c'
alias ect='emacsclient -nw'

# Ruby, bundler, rails, etc
alias rake='noglob rake'
alias be='bundle exec'
alias ber='noglob bundle exec rake'

# Cryptography helpers
function clipencrypt() {
  local -a recipients
  while [[ ! -z $1 ]]; do
    recipients+=( '-r' "$1" )
    shift
  done

  xclip -o -selection clipboard | gpg -eao - "${(@)recipients}" | xclip -i -selection clipboard
}

alias ce=clipencrypt

# Linux Xorg screen helpers
output_left="DP-2"
output_right="DP-0"
alias ssingle="xrandr --output $output_right --off"
alias snormal="xrandr --output $output_right --auto --pos 3840x0 --rotate right --output $output_left --auto --pos 0x1000"
alias s1440="xrandr --output $output_right --auto --pos 2560x0 --rotate right --output $output_left --mode "2560x1440" --pos 0x1180"
alias s1080="xrandr --output $output_right --auto --pos 1920x0 --rotate right --output $output_left --mode "1920x1080" --pos 0x1400"

# Show packages updated today, do not include Haskell library spam
alias updated='grep upgraded /var/log/pacman.log | grep -v "haskell-" | grep "$(date '+%Y-%m-%d')"'

# Yazi wrapper that changes cwd on exit
function y() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")"
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		builtin cd -- "$cwd"
	fi
	rm -f -- "$tmp"
}

# vim:ft=zsh
