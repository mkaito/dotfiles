call dirsettings#Install()

filetype off
syntax off

call pathogen#runtime_append_all_bundles()

filetype plugin indent on

syntax on
syntax sync minlines=256

set nocompatible

set tabstop=2
set shiftwidth=2
set softtabstop=2
set noexpandtab
set autoindent
set nostartofline

set encoding=utf-8
set termencoding=utf-8

set hidden
set scrolloff=3
set showmode
set showcmd
set ttyfast
set ruler
set backspace=indent,eol,start
set laststatus=2
set undofile

set wildmenu
set wildmode=list:longest
set wildignore=*.swp,*.bak
set wildignore+=*.pyc,*.class,*.sln,*.Master,*.csproj,*.csproj.user,*.cache,*.dll,*.pdb,*.min.*
set wildignore+=*/.git/**/*,*/.hg/**/*,*/.svn/**/*
set wildignore+=tags
set wildignore+=*.tar.*
set wildignorecase

set splitbelow
set splitright

let mapleader = ","
let g:mapleader = ","

nnoremap ; :
vnoremap ; :
nnoremap / /\v
vnoremap / /\v
nnoremap <C-e> :e#<CR>
set ignorecase
set smartcase
set gdefault
set incsearch
set showmatch
nnoremap <leader><space> :noh<cr>
map <tab> g%
cmap w!! %!sudo tee > /dev/null %

set statusline=%<\ %n\ %f\ %m%r%y%=\ Line:\ \%l\/\%L\ Column:\ \%c\ 

set wrap
set textwidth=79
set formatoptions=qrn1
"set colorcolumn=79

set list
set listchars=tab:»\ ,extends:›,precedes:‹,nbsp:·,trail:·

set nuw=6
set number
set relativenumber
set cursorline
set clipboard=unnamedplus				" X11 System Clipboard
set autowrite
set autoread

" Limit the amount of filesystem events
set nowritebackup
set nobackup
"set noswapfile

" Save your swp files to a less annoying place than the current directory.
" If you have .vim-swap in the current directory, it'll use that.
" Otherwise it saves it to ~/.vim/swap, ~/tmp or .
if isdirectory($HOME . '/.vim/swap') == 0
	:silent !mkdir -p ~/.vim/swap >/dev/null 2>&1
endif
set directory=./.vim-swap//
set directory+=~/.vim/swap//
set directory+=~/tmp//
set directory+=.

" viminfo stores the the state of your previous editing session
set viminfo+=n~/.vim/viminfo

if exists("+undofile")
  " undofile - This allows you to use undos after exiting and restarting
  " This, like swap and backups, uses .vim-undo first, then ~/.vim/undo
  " :help undo-persistence
  " This is only present in 7.3+
  if isdirectory($HOME . '/.vim/undo') == 0
    :silent !mkdir -p ~/.vim/undo > /dev/null 2>&1
  endif
  set undodir=./.vim-undo//
  set undodir+=~/.vim/undo//
  set undofile
endif

augroup vimrcEx
	au!

	" When editing a file, always jump to the last known cursor position.
	" Don't do it when the position is invalid or when inside an event handler
	" (happens when dropping a file on gvim).
	autocmd BufReadPost *
				\ if line("'\'") > 0 && line("'\'") <= line("$") |
				\ exe "normal g`\"" |
				\ endif

	au BufWritePre * :%s/s+$//e	 " Remove trailing whitespace upon saving
	" au FocusLost,InsertLeave * bufdo call functions#AutoSave()
	au InsertLeave * :wa
augroup END

" Relies on Xresources for colours
colorscheme terminal

nnoremap <leader>a :Ack

" Select what you just pasted
nnoremap <leader>v V`]

" use jj to exit insert mode
inoremap jj <ESC>

" Create vertical split and switch to it
nnoremap <leader>w <C-w>v<C-w>l

" Split window navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Move around split lines
nnoremap j gj
nnoremap k gk

" Fast editing of the .vimrc
map <leader>e :e! ~/.vimrc<CR>

" " Periodical auto-save
" " Write to disk after 1 second of inactivity, once every 15 seconds.
" au BufRead,BufNewFile * let b:last_autosave=localtime()
" au CursorHold * call UpdateFile()
" au BufWritePre * let b:last_autosave=localtime()
" set updatetime=1000
" function! UpdateFile()
" 	if exists("b:last_autosave") && ((localtime() - b:last_autosave) >= 15)
" 		update
" 		let b:last_autosave=localtime()
" 	endif
" endfunction

au FileType html,xml,xsl source ~/.vim/scripts/closetag.vim
iabbrev </ </<C-X><C-O>

" Vim style lorem ipsum generator
inoreabbrev lorem Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.

" Ruby stuff
autocmd FileType ruby
					\ if expand('%') =~# '_test\.rb$' |
					\   compiler rubyunit | setl makeprg=testrb\ \"%:p\" |
					\ elseif expand('%') =~# '_spec\.rb$' |
					\  compiler rspec | setl makeprg=rspec\ \"%:p\" |
					\ else |
					\  compiler ruby | setl makeprg=ruby\ -wc\ \"%:p\" |
					\ endif

" Coffee Script mode: Enable folding
let coffee_folding = 1

" Ledger
au BufNewFile,BufRead *.ldg,*.ledger setf ledger | comp ledger
let g:ledger_maxwidth = 80
let g:ledger_fillstring = '	»'

" Markdown
au BufNewFile,BufRead *.md setf markdown setlocal tw=79 fo=tqan

" Haskellmode
"au Bufenter *.hs compiler ghc
"let g:haddock_browser = "firefox"

" CtrlP
set runtimepath^=~/.vim/bundle/ctrlp.vim
let g:ctrlp_map = '<Leader>t'
let g:ctrlp_working_path_mode = 'ra'

let g:ctrlp_custom_ignore = {
	\ 'dir':	'\v[\/]\.(git|hg|svn)|bourbon|neat|vendor$',
	\ 'file': '\v\.(exe|so|dll|pyc|wav|mp3|ogg|blend|swp|jpg|gif|png)$',
	\ }

iab <expr> ddate strftime("%Y/%m/%d")
