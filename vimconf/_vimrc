filetype off
call pathogen#runtime_append_all_bundles()
filetype plugin indent on

"" {{{ General options
set nocompatible

set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab

set encoding=utf-8
set scrolloff=3
set autoindent
set showmode
set showcmd
set hidden
set wildmenu
set wildmode=list:longest
set ttyfast
set ruler
set backspace=indent,eol,start
set laststatus=2
set undofile

let mapleader = ","
let g:mapleader = ","

nnoremap / /\v
vnoremap / /\v
set ignorecase
set smartcase
set gdefault
set incsearch
set showmatch
nnoremap <leader><space> :noh<cr>
nnoremap <tab> %
vnoremap <tab> %

set wrap
set textwidth=79
set formatoptions=qrn1
set colorcolumn=85

set list
set listchars=tab:▸\ ,eol:¬

colorscheme wombat256i
set nuw=6
set number
set clipboard=unnamedplus       " X11 System Clipboard
set autowrite
set autoread

" Swith syntax highlighting on, when the terminal has colors
" Also switching on highlighting the last used search pattern
if (&t_Co > 2 || has("gui_running")) && !exists("syntax_on")
    syntax on
    set hlsearch
endif

augroup vimrcEx
  au!

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  autocmd BufReadPost *
        \ if line("'\'") > 0 && line("'\'") <= line("$") |
        \ exe "normal g`\"" |
        \ endif

  au FocusLost * :wa
augroup END

" FuzzyFinder options.
let g:fuzzy_ignore = "*.log;gems/*;vendor/*;.gitignore;*.pyo"
let g:fuzzy_matching_limit = 30
" }}}

" {{{ Mappings & Functions
"F7 WordProcessorOn
:map <F7> :set wrap <CR> :setlocal spell spelllang=en_gb <CR>
"F8 WordProcessorOff
:map <F8> :set nowrap <CR> :set nospell <CR>

" Clean up trailing whitespace in the active file
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>

nnoremap <leader>a :Ack

" This will sort a CSS file by selector
nnoremap <leader>S ?{<CR>jV/^\s*\}?$<CR>k:sort<CR>:noh<CR>

" Select what you just pasted
nnoremap <leader>v V`]

" use jj to exit insert mode
inoremap jj <ESC>

" Create vertical split and switch to it
nnoremap <leader>w <C-w>v<C-w>l

" Split window navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" FuzzyFinder key maps
map <leader>t :FuzzyFinderTextMate<CR>
map <leader>b :FuzzyFinderBuffer<CR>


" <leader>r will spawn a Ranger instance in cwd() and open the selected file
" in vim
fun Ranger()
  silent !ranger --choosefile=/tmp/chosen
  if filereadable('/tmp/chosen')
    exec 'edit ' . system('cat /tmp/chosen')
    call system('rm /tmp/chosen')
  endif
  redraw!
endfun
map <leader>r :call Ranger()<CR>

" Fast editing of the .vimrc
map <leader>e :e! ~/.vimrc<CR>
" }}}

" {{{ Mode options
if !empty(matchstr($MY_RUBY_HOME, 'jruby'))
  let g:ruby_path = join(split(glob($MY_RUBY_HOME.'/lib/ruby/*.*')."\n".glob($MY_RUBY_HOME.'/lib/rubysite_ruby/*'),"\n"),',')
endif
" }}}

" vim:fdm=marker
