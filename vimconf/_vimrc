filetype off
call pathogen#runtime_append_all_bundles()
filetype plugin indent on

set nocompatible

set tabstop=2
set shiftwidth=2
set softtabstop=2
set noexpandtab

set encoding=utf-8
set scrolloff=3
set autoindent
set showmode
set showcmd
set hidden
set wildmenu
set wildmode=list:longest
set ttyfast
set ruler
set backspace=indent,eol,start
set laststatus=2
set undofile

let mapleader = ","
let g:mapleader = ","

nnoremap ; :
vnoremap ; :
nnoremap / /\v
vnoremap / /\v
set ignorecase
set smartcase
set gdefault
set incsearch
set showmatch
nnoremap <leader><space> :noh<cr>
nnoremap <tab> %
vnoremap <tab> %

set wrap
set textwidth=0
set formatoptions=qrn1
"set colorcolumn=79

"set list
"set listchars=tab:—\ ,eol:¬

" Swith syntax highlighting on, when the terminal has colors
" Also switching on highlighting the last used search pattern
if (&t_Co > 2 || has("gui_running")) && !exists("syntax_on")
		syntax on
		set background=dark
		colorscheme zenburn
		set hlsearch
endif

set nuw=6
set number
set cursorline
set clipboard=unnamedplus			 " X11 System Clipboard
set autowrite
set autoread

" Save your backups to a less annoying place than the current directory.
" If you have .vim-backup in the current directory, it'll use that.
" Otherwise it saves it to ~/.vim/backup or . if all else fails.
if isdirectory($HOME . '/.vim/backup') == 0
  :silent !mkdir -p ~/.vim/backup >/dev/null 2>&1
endif
set backupdir-=.
set backupdir+=.
set backupdir-=~/
set backupdir^=~/.vim/backup/
set backupdir^=./.vim-backup/
set backup

" Save your swp files to a less annoying place than the current directory.
" If you have .vim-swap in the current directory, it'll use that.
" Otherwise it saves it to ~/.vim/swap, ~/tmp or .
if isdirectory($HOME . '/.vim/swap') == 0
  :silent !mkdir -p ~/.vim/swap >/dev/null 2>&1
endif
set directory=./.vim-swap//
set directory+=~/.vim/swap//
set directory+=~/tmp//
set directory+=.

" viminfo stores the the state of your previous editing session
set viminfo+=n~/.vim/viminfo

if exists("+undofile")
  " undofile - This allows you to use undos after exiting and restarting
  " This, like swap and backups, uses .vim-undo first, then ~/.vim/undo
  " :help undo-persistence
  " This is only present in 7.3+
  if isdirectory($HOME . '/.vim/undo') == 0
    :silent !mkdir -p ~/.vim/undo > /dev/null 2>&1
  endif
  set undodir=./.vim-undo//
  set undodir+=~/.vim/undo//
  set undofile
endif

augroup vimrcEx
	au!

	" When editing a file, always jump to the last known cursor position.
	" Don't do it when the position is invalid or when inside an event handler
	" (happens when dropping a file on gvim).
	autocmd BufReadPost *
				\ if line("'\'") > 0 && line("'\'") <= line("$") |
				\ exe "normal g`\"" |
				\ endif

	au FocusLost * :wa
	au BufWritePre * :%s/s+$//e	 " Remove trailing whitespace upon saving
augroup END

" Clean up trailing whitespace in the active file
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>

nnoremap <leader>a :Ack

" This will sort a CSS file by selector
nnoremap <leader>S ?{<CR>jV/^\s*\}?$<CR>k:sort<CR>:noh<CR>

" Select what you just pasted
nnoremap <leader>v V`]

" use jj to exit insert mode
inoremap jj <ESC>

" Create vertical split and switch to it
nnoremap <leader>w <C-w>v<C-w>l

" Split window navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Move around split lines
nnoremap j gj
nnoremap k gk

" Fast editing of the .vimrc
map <leader>e :e! ~/.vimrc<CR>

" Periodical auto-save
" Write to disk after 1 second of inactivity, once every 15 seconds.
au BufRead,BufNewFile * let b:last_autosave=localtime()
au CursorHold * call UpdateFile()
au BufWritePre * let b:last_autosave=localtime()
set updatetime=1000
function! UpdateFile()
	if exists("b:last_autosave") && ((localtime() - b:last_autosave) >= 15)
		update
		let b:last_autosave=localtime()
	endif
endfunction

" Ruby stuff
autocmd FileType ruby
					\ if expand('%') =~# '_test\.rb$' |
					\   compiler rubyunit | setl makeprg=testrb\ \"%:p\" |
					\ elseif expand('%') =~# '_spec\.rb$' |
					\  compiler rspec | setl makeprg=rspec\ \"%:p\" |
					\ else |
					\  compiler ruby | setl makeprg=ruby\ -wc\ \"%:p\" |
					\ endif

" Coffee Script mode: Enable folding
let coffee_folding = 1

" Ledger
au BufNewFile,BufRead *.ldg,*.ledger setf ledger | comp ledger
let g:ledger_maxwidth = 80
let g:ledger_fillstring = '	»'

" haskellmode-vim
au BufEnter *.hs compiler ghc
let g:haddock_browser="/usr/bin/firefox"

" CtrlP
set runtimepath^=~/.vim/bundle/ctrlp.vim
let g:ctrlp_map = '<c-t>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_custom_ignore = {
	\ 'dir':	'\v[\/]\.(git|hg|svn)$',
	\ 'file': '\v\.(exe|so|dll)$',
	\ 'link': 'SOME_BAD_SYMBOLIC_LINKS',
	\ }
let g:ctrlp_user_command = {
	\ 'types': {
		\ 1: ['.git', 'cd %s && git ls-files'],
		\ 2: ['.hg', 'hg --cwd %s locate -I .'],
		\ },
	\ 'fallback': 'find %s -type f'
	\ }
